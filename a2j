#!/bin/bash

usage() { echo "Usage: $(basename $0) <asana_id> [-p projectKey] [-t issue type] [-P parent issue]" 1>&2; exit 1; }
[ $# -eq 0 ] && usage

n=1
while [ $# -gt 0 ]
do
#  echo $1
  case $1 in
	-*) break;;
	*) eval "arg_$n=\$1"; n=$(( $n + 1 )) ;;
  esac
  shift
done

asanaId=${arg_1}
[ -z "$asanaId" ] && echo "Error: asana_id is required" && usage
re='^[0-9]+$'
if ! [[ $asanaId =~ $re ]] ; then
   echo "Error: asana_id must be a number" && usage
fi
while getopts 't:P:h' opt; do
  echo "option $opt - ${OPTARG}"
  case "$opt" in
	t)
	  issueType="${OPTARG}"
	  issueTypeArg="-t${OPTARG}"
	  ;;
	p)
	  project="${OPTARG}"
	  projectArg="-p${OPTARG}"
	  ;;
	P)
	  parentIssue=${OPTARG}
	  parentIssueArg="-P ${OPTARG}"
	  ;;
	*)
	  usage
	  ;;
  esac
done
shift "$(($OPTIND -1))"

if [ ! -n "${ASANA_PAT_TOKEN}" ]; then
   echo "ERROR: Asana API token must be set in environment variable ASANA_PAT_TOKEN" && usage
fi

echo -e "Asana task to Jira creator (A2J) v0.02"
echo -e "======================================\n"
echo "Asana issue = $asanaId"
if [ -n "$project" ]; then
   echo -e "Jira Project = $project\n"
fi
if [ -z "$issueType" ]; then
   issueType="Task"
   issueTypeArg="-tTask"
fi
echo -e "Issue type = $issueType\n"
if [ -n "$parentIssue" ]; then
   echo -e "Parent Issue = $parentIssue\n"
fi
#echo "Asana token = ${ASANA_PAT_TOKEN}"

# Get data from Asana
#####################
echo "Getting task data from Asana..."
#set URL
asana_url="https://app.asana.com/api/1.0/tasks/$asanaId?opt_pretty=true&opt_fields=name,notes,permalink_url,custom_fields"
#echo $asana_url

# Get asana data -- id, name, description ("notes" in asana API)
response_cmd=$(curl -w "%{http_code}" -o - -s -H "Authorization: Bearer ${ASANA_PAT_TOKEN}" -H "Accepts: application/json" $asana_url)
#echo $response_cmd
http_status=$(echo $response_cmd | awk -F'}' ' { print $NF } '   )
#echo "HTTP code: $http_status"
asana_data=$(echo $response_cmd | sed 's/\(.*\)}.*/\1/' )}
#echo $asana_data

if [[ "$http_status" != "200" ]]; then
	if [[ "$http_status" = "401" ]]; then
		echo "ERROR: Authorization error in Asana.  Check there is a valid API token set."
		1>&2; 
		exit 1
	fi
	if [[ "$http_status" = "404" ]]; then
		echo "ERROR: Asana task not found.  Please check ID and retry."
		1>&2; 
		exit 1
	fi
	echo "ERROR: Could not get Asana ticket data.  Failure."

fi

asana_gid=$(echo "${asana_data}"| jq -r '.data.gid')
asana_name=$(echo "${asana_data}"| jq -r '.data.name')
asana_notes=$(echo "${asana_data}"| jq -r '.data.notes')
asana_url=$(echo "${asana_data}"| jq -r '.data.permalink_url')
zendesk_id=$(echo "${asana_data}"| jq '.data.custom_fields' | jq -r '.[] | select(.name=="ZD ID") | .display_value')

#echo "Gid: $asana_gid"
#echo "Name: $asana_name"
#echo -e "Notes: $asana_notes"
echo -e "Zendesk Id: $zendesk_id"

preamble="Ticket copied from Asana ticket: $asana_url"
if [ ! -z "$zendesk_id" ]; then
   zendesk_url="https://hashicorp.zendesk.com/agent/tickets/$zendesk_id"
   preamble=$(printf '%s\n\n%s' "$preamble" "Zendesk ticket: $zendesk_url")
fi
#printf '%s\n\n%s' "$asana_gid_warn" "$asana_notes" 

echo "Successfully received Asana data.  Creating Jira ticket..."
echo "jira issue create ${projectArg} ${issueTypeArg} -s"$asana_name" ${parentIssueArg}"
#printf 'Body:\n%s\n\n%s' "$preamble" "$asana_notes"
printf '%s\n\n%s' "$preamble" "$asana_notes" | jira issue create ${projectArg} ${issueTypeArg} -s"$asana_name" ${parentIssueArg}
echo -e "Jira ticket created.\n"
